<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>byblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-12T06:59:16.293Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ccsert</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spingboot项目打包</title>
    <link href="http://yoursite.com/2019/02/12/spingboot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/"/>
    <id>http://yoursite.com/2019/02/12/spingboot项目打包/</id>
    <published>2019-02-12T06:23:48.000Z</published>
    <updated>2019-02-12T06:59:16.293Z</updated>
    
    <content type="html"><![CDATA[<p>上次我们集成了mybatis和druid数据源以及通用mapper。</p><p>集成这些以后我们已经可以拿这样的基础工程进行开发了。</p><p>不过在此之前我们先学习一下springboot项目打包，springboot因为内嵌了tomcat，所以可直接打成jar包运行，直接使用 <code>java -jar jar包名字</code> 即可直接运行。这里记录一下项目打包</p><a id="more"></a><p>项目打包我们通过使用maven-jar-plugin和maven-dependency-plugin插件打包</p><p>这样的打包以后就会是一个可以执行的jar，直接用<code>java -jar jar</code>包名字就可以运行项目</p><p>我们在pom.xml安装插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.xxg.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>安装完成以后我们就可以直接打包了</p><p>我们进入项目所在的目录</p><img src="/2019/02/12/spingboot项目打包/项目路径.png"><p>然后使用git命令窗口，也可以用dos命令，我们用cmd吧</p><p>我们用dos命令进入项目目录</p><img src="/2019/02/12/spingboot项目打包/dos项目目录.png"><p>然后先执行<code>mvn clean</code></p><img src="/2019/02/12/spingboot项目打包/mvn清除.png"><p>该命令是删除掉项目下target文件夹，springboot项目在运行的时候会把字节码静态资源等文件输出到target文件夹下</p><p>我们先将项目清理，然后在执行<code>mvn package assembly:single</code></p><p>执行这个命令的时候会将项目运行测试后打包</p><img src="/2019/02/12/spingboot项目打包/打包.png"><p>看见<code>BUILD SUCCESS</code>就代表成功了。</p><p>我们看一下打好的包，项目打包后会存放在项目根目录下的target文件夹下</p><img src="/2019/02/12/spingboot项目打包/打好的包.png"><p>我们通过<code>java -jar demo-0.0.1-SNAPSHOT.jar</code>即可直接运行项目</p><img src="/2019/02/12/spingboot项目打包/运行项目.png"><p>我们用浏览器访问一下</p><img src="/2019/02/12/spingboot项目打包/测试项目.png"><p>好的这样就完事了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次我们集成了mybatis和druid数据源以及通用mapper。&lt;/p&gt;
&lt;p&gt;集成这些以后我们已经可以拿这样的基础工程进行开发了。&lt;/p&gt;
&lt;p&gt;不过在此之前我们先学习一下springboot项目打包，springboot因为内嵌了tomcat，所以可直接打成jar包运行，直接使用 &lt;code&gt;java -jar jar包名字&lt;/code&gt; 即可直接运行。这里记录一下项目打包&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成ssm+druid+通用mapper</title>
    <link href="http://yoursite.com/2019/02/02/SpringBoot%E9%9B%86%E6%88%90ssm-druid-%E9%80%9A%E7%94%A8mapper/"/>
    <id>http://yoursite.com/2019/02/02/SpringBoot集成ssm-druid-通用mapper/</id>
    <published>2019-02-02T01:23:54.000Z</published>
    <updated>2019-02-12T07:09:55.861Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/15248.jpg"><a id="more"></a><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><h2 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h2><p>首先什么是springboot？</p><p>springboot是spring的另外一款框架，设计目的是用来简化新的spring应用的搭建和开发时所需要的特定的配置，从而使开发过程不需要一次次无聊的复制那些一模一样的配置。</p><p>springboot内嵌tomcat，不需要部署war文件了，常常我们只需要将springboot项目打成jar包，然后通过: <code>java -jar 项目名称</code>即可，例如我有一个名叫demo的项目现在打包成了demo.jar需要在服务器上运行，那么我只需要这样:    java -jar demo.jar</p><p>springboot简化了maven的配置</p><p>而且springboot可以自动化配置，其实就将一些配置设置了有默认的配置。</p><h2 id="ssm框架"><a href="#ssm框架" class="headerlink" title="ssm框架"></a>ssm框架</h2><p>ssm框架即Spring+SpringMVC+Mybatis</p><p>这里引用一下百度的介绍</p><blockquote><p><strong>Spring</strong><br>　　Spring就像是整个项目中装配bean的大工厂，在配置文件中可以指定使用特定的参数去调用实体类的构造方法来实例化对象。也可以称之为项目中的粘合剂。<br>　　Spring的核心思想是IoC（控制反转），即不再需要程序员去显式地<code>new</code>一个对象，而是让Spring框架帮你来完成这一切。</p><p><strong>SpringMVC</strong><br>　　SpringMVC在项目中拦截用户请求，它的核心Servlet即DispatcherServlet承担中介或是前台这样的职责，将用户请求通过HandlerMapping去匹配Controller，Controller就是具体对应请求所执行的操作。SpringMVC相当于SSH框架中struts。</p><p><strong>mybatis</strong><br>　　mybatis是对jdbc的封装，它让数据库底层操作变的透明。mybatis的操作都是围绕一个sqlSessionFactory实例展开的。mybatis通过配置文件关联到各实体类的Mapper文件，Mapper文件中配置了每个类对数据库所需进行的sql语句映射。在每次与数据库交互时，通过sqlSessionFactory拿到一个sqlSession，再执行sql命令。</p><p>页面发送请求给控制器，控制器调用业务层处理逻辑，逻辑层向持久层发送请求，持久层与数据库交互，后将结果返回给业务层，业务层将处理逻辑发送给控制器，控制器再调用视图展现数据。</p></blockquote><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><p>Druid是阿里巴巴开源平台的一款项目，就是一款Java语言的数据库连接池，而且性能优越拥有强大的监控和扩展功能。</p><h2 id="通用Mapper"><a href="#通用Mapper" class="headerlink" title="通用Mapper"></a>通用Mapper</h2><p>我们用Mybatis进行开发的时候肯定会遇到这样一种情况，有时候我的某个表只需要进行简单的增删改查，但是却需要些大量的xml，而且假如数据库结构发生改变的时候所有的实体类和sql都需要修改。（虽然一般不会改，改了可能会这样(￣ε(#￣)☆╰╮o(￣皿￣///)）这样大大的影响了我们的工作效率啊。为此就出现了通用mapper。</p><p>通用mapper是个什么鬼东西呢，怎么就这么棒呢，通用mapper就是为了解决单表增删该改查（没错你没看错只能解决单表，多表自己想办法(￣_,￣ )），基于mybatis插件，这时候开发人员不需要写sql，不需要在Dao中写方法，只要写好实体类就能支持相应的增删改查方法。是不是感觉很奈斯。</p><h1 id="快速搭建一个springboot项目"><a href="#快速搭建一个springboot项目" class="headerlink" title="快速搭建一个springboot项目"></a>快速搭建一个springboot项目</h1><p>快速搭建，哼哼哼，你猜有多快，你跟本想不到有多快︿(￣︶￣)︿</p><h2 id="使用spring脚手架"><a href="#使用spring脚手架" class="headerlink" title="使用spring脚手架"></a>使用spring脚手架</h2><p>关于spring脚手架的使用，我们有两种方式</p><p>第一种是通过<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 这个地址直接搭建</p><p>打开后大概是这个样子</p><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/springboot脚手架1.jpg"><p>我们选择Maven Project因为我们的项目是用maven构建 ，语言选Java，Springboot版本默认就好。</p><p>然后在<strong>Group</strong>填写自己的项目组织所属，一般就是com,xxxx之类的啦(ーー゛)，<strong>Artifact</strong> 我们填自己的项目名，比如demo。最后<strong>Search for dependencies</strong> 我们可以指定web，填一个web回车就好了。</p><p>完事后大概就是这个样子<img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/springboot脚手架2.png"></p><p>然后我们点击Generate Project将项目下载下来。</p><p>我们得到一个demo.zip的文件，然后将它解压</p><p>然后我们看下文件结构</p><blockquote><p>│  .gitignore<br>│  mvnw<br>│  mvnw.cmd<br>│  pom.xml<br>│<br>├─.mvn<br>│  └─wrapper<br>│          maven-wrapper.jar<br>│          maven-wrapper.properties<br>│<br>└─src<br>   ├─main<br>   │  ├─java<br>   │  │  └─com<br>   │  │      └─ccsert<br>   │  │          └─demo<br>   │  │                  DemoApplication.java<br>   │  │<br>   │  └─resources<br>   │      │  application.properties<br>   │      │<br>   │      ├─static<br>   │      └─templates<br>   └─test<br>       └─java<br>           └─com<br>               └─ccsert<br>                   └─demo<br>                           DemoApplicationTests.java</p><p>这里只需要知道pom.xml是用来管理maven依赖的，以及DemoApplication是启动类就可以了</p></blockquote><p>接下来我们将项目导入到idea中。</p><p>点击Import Project<img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/项目导入1.png"></p><p>选择那个解压好的项目点击ok<img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/项目导入2.png"></p><p>然后这里选择maven点击下一步<img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/项目导入3.png"></p><p>然后一直下一步，最后finis就好了<img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/项目导入4.png"><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/项目导入5.png"><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/项目导入6.png"><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/项目导入7.png"><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/项目导入8.png"></p><p>这样我们就完成了springboot的创建<img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/项目导入9.png"></p><p>还有一种创建方式是通过idea自带的脚手架 工具创建，这里不在进行说明了。</p><h2 id="SpringBoot快速入门"><a href="#SpringBoot快速入门" class="headerlink" title="SpringBoot快速入门"></a>SpringBoot快速入门</h2><p>既然项目搭建好了，那么我们可以开始写代码了。我们可以像写springMVC一样去使用springboot写web项目。</p><p>我们先创建一个controller的包，然后创建一个controller类，就叫HelloController吧,创建好以后是这个样子的</p><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/快速入门1.png"><p>接下来国际惯例，hello world (&#42;/ω＼&#42;)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccsert.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段瑜</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span>             <span class="comment">//RestController==@ResponseBody+@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello SpringBoot"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们将项目运行起来，在DemoApplication直接点击绿色小箭头运行，就跟运行main方法一样，好吧就是运行main方法</p><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/快速入门2.png"><p>我们从控制台看到tomcat的端口是8080，所以我们在浏览器输入<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a> 就能直接访问你的项目了</p><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/快速入门3.png"><p>这样一来我们很轻松的就完成了一个基础的springboot web项目。是不是很简单？</p><h1 id="SpringBoot集成"><a href="#SpringBoot集成" class="headerlink" title="SpringBoot集成"></a>SpringBoot集成</h1><p>在上面我们已经完成了一个基础的项目，现在我们需要集成整合SSM以及druid连接池还有通用Mapper，在后面我会很详细的给大家讲解集成过程。</p><h2 id="SpringBoot集成Druid"><a href="#SpringBoot集成Druid" class="headerlink" title="SpringBoot集成Druid"></a>SpringBoot集成Druid</h2><p>springboot简化了maven 的配置我们只要引入druid的maven库即可，不需要关心maven之间的依赖，springboot会自行帮我们处理好</p><p>我们直接引入druid的地址    将其引入pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Druid连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们使用yaml的配置，所以将原本是application.properority的文件改名为application.yml</p><p>然后进行配置，记得先建立一个demo的数据库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/demo?useUnicode=true&amp;characterEncoding=UTF8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">    platform:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    initialSize:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">    minIdle:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">    maxActive:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">    maxWait:</span> <span class="number">15000</span></span><br><span class="line"><span class="attr">    timeBetweenEvictionRunsMillis:</span> <span class="number">120000</span></span><br><span class="line"><span class="attr">    minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">    validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">    testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">    connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    druidRegistrationUrl:</span> <span class="string">/druid/*</span></span><br><span class="line"><span class="attr">    resetEnable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    loginUsername:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    loginPassword:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><p>我原本准备在yml里面写些注释的，但是后来启动会报错，就去掉了注释，关于德鲁伊配置的参数大家可以去看看相关的文档。</p><p>这里注意一下我使用的druid版本不是最新版本，最新版本的配置与旧版本的filters: stat,wall,log4j 不太一样，这个版本是当前使用人数最多的版本。</p><p>yml配置好以后我们还要对druid进行相关的配置</p><p>先在demo包下建一个config包，然后在config创建DruidConfig类,在此之前因为我们会需要写getset方法我们引入一下Lombok</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面的是配置类的Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccsert.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line"><span class="meta">@Getter</span><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DruidConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> initialSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minIdle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxActive;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxWait;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeBetweenEvictionRunsMillis;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> minEvictableIdleTimeMillis;</span><br><span class="line">    <span class="keyword">private</span> String validationQuery;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testWhileIdle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnBorrow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> testOnReturn;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> poolPreparedStatements;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolPreparedStatementPerConnectionSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> removeAbandonedTimeoutMillis;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> removeAbandoned;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> logAbandoned;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> logDifferentThread;</span><br><span class="line">    <span class="keyword">private</span> String filters;</span><br><span class="line">    <span class="keyword">private</span> String connectionProperties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> useGlobalDataSourceStat;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Druid 监控 Servlet 配置参数</span></span><br><span class="line">    <span class="keyword">private</span> String druidRegistrationUrl;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> resetEnable;</span><br><span class="line">    <span class="keyword">private</span> String loginUsername;</span><br><span class="line">    <span class="keyword">private</span> String loginPassword;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Filters 配置参数</span></span><br><span class="line">    <span class="keyword">private</span> String filtersUrlPatterns;</span><br><span class="line">    <span class="keyword">private</span> String exclusions;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sessionStatMaxCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> sessionStatEnable;</span><br><span class="line">    <span class="keyword">private</span> String principalSessionName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> profileEnable;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setInitialSize(initialSize);</span><br><span class="line">        dataSource.setMinIdle(minIdle);</span><br><span class="line">        dataSource.setMaxActive(maxActive);</span><br><span class="line">        dataSource.setMaxWait(maxWait);</span><br><span class="line">        dataSource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);</span><br><span class="line">        dataSource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);</span><br><span class="line">        dataSource.setValidationQuery(validationQuery);</span><br><span class="line">        dataSource.setTestWhileIdle(testWhileIdle);</span><br><span class="line">        dataSource.setTestOnBorrow(testOnBorrow);</span><br><span class="line">        dataSource.setTestOnReturn(testOnReturn);</span><br><span class="line">        dataSource.setPoolPreparedStatements(poolPreparedStatements);</span><br><span class="line">        dataSource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);</span><br><span class="line">        dataSource.setRemoveAbandonedTimeoutMillis(removeAbandonedTimeoutMillis);</span><br><span class="line">        dataSource.setRemoveAbandoned(removeAbandoned);</span><br><span class="line">        dataSource.setLogDifferentThread(logDifferentThread);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource.setFilters(filters);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(<span class="string">"Druid URL过滤设置失败"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        dataSource.setConnectionProperties(connectionProperties);</span><br><span class="line">        dataSource.setUseGlobalDataSourceStat(useGlobalDataSourceStat);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">druidServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean servletBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), druidRegistrationUrl);</span><br><span class="line">        servletBean.addInitParameter(<span class="string">"resetEnable"</span>, String.valueOf(resetEnable));</span><br><span class="line">        servletBean.addInitParameter(<span class="string">"loginUsername"</span>, loginUsername);</span><br><span class="line">        servletBean.addInitParameter(<span class="string">"loginPassword"</span>, loginPassword);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> servletBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着我们让druid支持事务，在config包下创建一个TransactionConfig类</p><p>在此之前因为需要用到mybatis的注解，我们先将mybatis的依赖引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后下面是Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccsert.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.TransactionManagementConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段瑜</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(&#123;DruidConfig.class&#125;)</span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = &#123;<span class="string">"Mybatis 的 DAO 接口所在的包路径"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionConfig</span> <span class="keyword">implements</span> <span class="title">TransactionManagementConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DruidDataSource mDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">annotationDrivenTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(mDataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们配置一下druid的监控界面</p><p>在上面的DruidConfig类中加入一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">druidServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletRegistrationBean servletBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), druidRegistrationUrl);</span><br><span class="line">    servletBean.addInitParameter(<span class="string">"resetEnable"</span>, String.valueOf(resetEnable));</span><br><span class="line">    servletBean.addInitParameter(<span class="string">"loginUsername"</span>, loginUsername);</span><br><span class="line">    servletBean.addInitParameter(<span class="string">"loginPassword"</span>, loginPassword);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> servletBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就配置完毕了</p><p>然后我们开始集成mybatis，这个时候先不要着急访问druid的监控界面，也不要着急启动项目，因为我们还没有mapper</p><p>接口。</p><h2 id="SpringBoot集成mybatis"><a href="#SpringBoot集成mybatis" class="headerlink" title="SpringBoot集成mybatis"></a>SpringBoot集成mybatis</h2><p>我们这里使用xml写sql所以在刚才的yml配置里加上一条配置用于扫描mapper.xml的映射文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mappers/**/*Mapper.xml</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.ccsert.demo.*.model</span></span><br></pre></td></tr></table></figure><p>然后在resources下建一个文件夹名字为mappers</p><p>其实这样已经差不多可以使用了，这里我们先不着急使用</p><p>先集成一下通用mapper</p><h2 id="SpringBoot集成通用mapper"><a href="#SpringBoot集成通用mapper" class="headerlink" title="SpringBoot集成通用mapper"></a>SpringBoot集成通用mapper</h2><p>先引入通用mapper</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通用mapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们在config包下建立一个MyBatisConfig 类用于配置通用mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccsert.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段瑜</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"加载MyBatisConfig....."</span>);</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">"sqlSessionFactory"</span>);</span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">"com.ccsert.demo.login.dao"</span>);</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        properties.setProperty(<span class="string">"mappers"</span>, Mapper.class.getName());</span><br><span class="line">        properties.setProperty(<span class="string">"notEmpty"</span>, <span class="string">"false"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"IDENTITY"</span>, <span class="string">"MYSQL"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"ORDER"</span>,<span class="string">"BEFORE"</span>);</span><br><span class="line">        mapperScannerConfigurer.setProperties(properties);</span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了结束了，就这么点点东西</p><p>我们直接开始使用测试一下</p><h1 id="SpringBoot-Smm使用"><a href="#SpringBoot-Smm使用" class="headerlink" title="SpringBoot Smm使用"></a>SpringBoot Smm使用</h1><p>在demo新建一个login包吧</p><p>然后在login包中建立dao，controller，service，model四个包，弄完以后大概就是这样</p><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/ssm使用.png"><p>然后我们先建立一个简单的用户表，并新增些数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Navicat MySQL Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Source Server         : 本地</span></span><br><span class="line"><span class="comment">Source Server Version : 50624</span></span><br><span class="line"><span class="comment">Source Host           : 127.0.0.1:3306</span></span><br><span class="line"><span class="comment">Source Database       : demo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Target Server Type    : MYSQL</span></span><br><span class="line"><span class="comment">Target Server Version : 50624</span></span><br><span class="line"><span class="comment">File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Date: 2019-02-11 14:43:32</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user_info</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user_info`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_info`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">5</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user_info</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user_info`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'ccsert'</span>, <span class="string">'123456'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user_info`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'root'</span>, <span class="string">'654321'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user_info`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'admin'</span>, <span class="string">'8848'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user_info`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'来个中文名'</span>, <span class="string">'111aaa'</span>);</span><br></pre></td></tr></table></figure><p>然后我们从实体类开始写</p><p>然后在model下建立一个实体类UserInfo，这里注意一下，我踩过几次坑了，这里必须使用驼峰命名法，因为我们的表名是带 _ 的所以因该从这里我们命名应当是UserInfo ，我们的通用mapper是根据实体类名去找表的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccsert.demo.login.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段瑜</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer Id;</span><br><span class="line">    <span class="keyword">private</span> String UserName;</span><br><span class="line">    <span class="keyword">private</span> String Password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是dao下建立一个UserInfoMapper接口，并继承通用mapper类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccsert.demo.login.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ccsert.demo.login.model.UserInfo;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段瑜</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">UserInfo</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在service包下建立UserInfoService接口</p><p>在接口里写一个查询所有的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccsert.demo.login.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ccsert.demo.login.model.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;UserInfo&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在service包下建立一个impl的包</p><p>然后在包内建一个UserInfoService的实现类UserInfoServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccsert.demo.login.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ccsert.demo.login.dao.UserInfoMapper;</span><br><span class="line"><span class="keyword">import</span> com.ccsert.demo.login.model.UserInfo;</span><br><span class="line"><span class="keyword">import</span> com.ccsert.demo.login.service.UserInfoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段瑜</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserInfoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoMapper userInfoMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;UserInfo&gt; userInfos = userInfoMapper.selectAll();</span><br><span class="line">        <span class="keyword">return</span> userInfos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是controller包下建立一个UserInfoController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccsert.demo.login.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ccsert.demo.login.model.UserInfo;</span><br><span class="line"><span class="keyword">import</span> com.ccsert.demo.login.service.UserInfoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 段瑜</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoService userInfoService;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"getall"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title">selectAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;UserInfo&gt; userInfos = userInfoService.selectAll();</span><br><span class="line">        <span class="keyword">return</span> userInfos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们还要在启动类上加一个mapper扫描的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.ccsert.demo.login.dao"</span>)</span><br></pre></td></tr></table></figure><p>导包时请注意，导入import tk.mybatis.spring.annotation.MapperScan;这个包</p><p>记得在事务配置上改为自己dao接口的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = &#123;<span class="string">"com.ccsert.demo.login.dao"</span>&#125;)</span><br></pre></td></tr></table></figure><p>我们运行一下，按照我写代码的方式，多半是要报错的。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat': Initialization of bean failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration': Unsatisfied dependency expressed through method 'setConfigurers' parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'transactionConfig': Unsatisfied dependency expressed through field 'mDataSource'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource [com/ccsert/demo/config/DruidConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.alibaba.druid.pool.DruidDataSource]: Factory method 'dataSource' threw exception; nested exception is java.lang.NoClassDefFoundError: org/apache/log4j/Logger</span><br></pre></td></tr></table></figure><p>果然是报错了(ノへ￣、)</p><p>不过这个错看起来很好解决，末尾说找不到log4j,讲道理导入log4j的依赖就完事了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入后重新启动项目是会又警告的，虽然开发运行没有影响但是在生产打包为jar可能会报错，这是因为springboot默认的日志是logback，而logback和log4j发生冲突了。</p><p>我们把logback排除掉即可。</p><p>然而真相并不是这样，其实是druid的锅，既然都已经给了更好的logback，我们就直接用就好哪里还要换一个又屏蔽一个的？(￣_,￣ )</p><p>我们只要在yml的配置文件中去掉 filters: stat,wall,log4j 的log4j就完事了</p><p>上面的那个log4j我就放出来看看而已不用加进去。嘿嘿嘿~~</p><p>我们最后在yml配置里加一个日志的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  file:</span> <span class="string">logs/mass.log</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework:</span> <span class="string">info</span></span><br><span class="line">    <span class="string">com.ccsert:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p>然后就能打印sql了。</p><p>然后再次运行，果断运行成功，其实前面的报错都是我装的，我早就考虑到这些问题了。（其实我压根不知道，还找了半天的错）</p><p>输入<a href="http://localhost:8080/user/getall访问" target="_blank" rel="noopener">http://localhost:8080/user/getall访问</a></p><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/运行成功.png"><p>我们访问一下druid的监控</p><p><a href="http://localhost:8080/druid/index.html" target="_blank" rel="noopener">http://localhost:8080/druid/index.html</a></p><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/ssm集成3.png" title="用户名和密码是配置文件里配置的admin"><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/ssm集成4.png"><p>然后我们点击sql监控</p><img src="/2019/02/02/SpringBoot集成ssm-druid-通用mapper/druid监控.png"><p>我们可以看到我们之前所执行的sql都会被druid监控</p><p>总算搞完了，后面有时间会继续集成使用的组件。</p><blockquote><p>这里感谢简书一位大佬的支持，其中有些代码摘抄于这位朋友的文章</p><p>附上原文链接<a href="https://www.jianshu.com/p/9dc6f4418a06" target="_blank" rel="noopener">https://www.jianshu.com/p/9dc6f4418a06</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/02/02/SpringBoot集成ssm-druid-通用mapper/15248.jpg&quot;&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
      <category term="ssm" scheme="http://yoursite.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机下Linux基本安装</title>
    <link href="http://yoursite.com/2019/01/29/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8BLinux%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/01/29/虚拟机下Linux基本安装/</id>
    <published>2019-01-29T07:21:18.000Z</published>
    <updated>2019-01-29T08:37:06.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一步：工具准备"><a href="#第一步：工具准备" class="headerlink" title="第一步：工具准备"></a>第一步：工具准备</h2><p>所需要的工具有，vm虚拟机安装包，centos7发行版本，ok就这些，这里选择centos发行版本的原因是一般企业级的服务器都是他，7版本是最新版本，很多企业级也开始更换为最新版本。</p><p>这里我提供centos和vm虚拟机破解版的百度网盘链接 链接: <a href="https://pan.baidu.com/s/1oU26U89LP71OMX1PGfkHTg" target="_blank" rel="noopener">https://pan.baidu.com/s/1oU26U89LP71OMX1PGfkHTg</a> 提取码: 98vs</p><p>这里不提供vm虚拟机的安装教程，关于vm虚拟机安装请自行百度。后面可能有涉及到一些常用命令，可能会解释可能不会解释，未解释到位的请提出，或自行百度了解。</p><a id="more"></a><h2 id="第二步：虚拟机创建"><a href="#第二步：虚拟机创建" class="headerlink" title="第二步：虚拟机创建"></a>第二步：虚拟机创建</h2><p>首先创建虚拟机，看图就好</p><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装2.png" title="默认典型直接下一步"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装3.png" title="选择自己的系统镜像"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装3.png" title="选择自己的系统镜像，然后点击下一步"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装5.png" title="名字可以随便取"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装6.png" title="磁盘看自己需要给大小"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装7.png" title="创建后开启取消掉"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装8.png" title="这里按照自己电脑性能改下内存"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装9.png" title="接着是处理器"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装10.png" title="然后是网络"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装11.png" title="最后移除没用的硬件"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装12.png" title="然后退回上级点完成"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装13.png" title="开启虚拟机"><h2 id="第三步：安装centos7系统"><a href="#第三步：安装centos7系统" class="headerlink" title="第三步：安装centos7系统"></a>第三步：安装centos7系统</h2><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装14.png" title="选择语言"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装15.png"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装16.png" title="打感叹号的点进去一下"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装17.png" title="因为是自动分区所以已经分好了"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装18.png" title="设置好后我们开始安装"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装19.png" title="设置一下root用户的密码"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装20.png" title="设置好好点击完成"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装21.png" title="然后等一会"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装22.png" title="安装完成以后我们点击重启"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装23.png" title="直接回车即可"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装25.png" title="输入root用户密码"><img src="/2019/01/29/虚拟机下Linux基本安装/centos安装26.png" title="登录成功">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一步：工具准备&quot;&gt;&lt;a href=&quot;#第一步：工具准备&quot; class=&quot;headerlink&quot; title=&quot;第一步：工具准备&quot;&gt;&lt;/a&gt;第一步：工具准备&lt;/h2&gt;&lt;p&gt;所需要的工具有，vm虚拟机安装包，centos7发行版本，ok就这些，这里选择centos发行版本的原因是一般企业级的服务器都是他，7版本是最新版本，很多企业级也开始更换为最新版本。&lt;/p&gt;
&lt;p&gt;这里我提供centos和vm虚拟机破解版的百度网盘链接 链接: &lt;a href=&quot;https://pan.baidu.com/s/1oU26U89LP71OMX1PGfkHTg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1oU26U89LP71OMX1PGfkHTg&lt;/a&gt; 提取码: 98vs&lt;/p&gt;
&lt;p&gt;这里不提供vm虚拟机的安装教程，关于vm虚拟机安装请自行百度。后面可能有涉及到一些常用命令，可能会解释可能不会解释，未解释到位的请提出，或自行百度了解。&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="vm虚拟机" scheme="http://yoursite.com/tags/vm%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>带图片的博客</title>
    <link href="http://yoursite.com/2019/01/29/%E5%B8%A6%E5%9B%BE%E7%89%87%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/01/29/带图片的博客/</id>
    <published>2019-01-29T06:11:35.000Z</published>
    <updated>2019-01-29T06:13:26.174Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这里是带图片的博客"><a href="#这里是带图片的博客" class="headerlink" title="这里是带图片的博客"></a>这里是带图片的博客</h3><blockquote><p>这里我会显示一张图片</p><img src="/2019/01/29/带图片的博客/示例.jpg" title="由于hexo会把代码解析，所以此处用图片展示"></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;这里是带图片的博客&quot;&gt;&lt;a href=&quot;#这里是带图片的博客&quot; class=&quot;headerlink&quot; title=&quot;这里是带图片的博客&quot;&gt;&lt;/a&gt;这里是带图片的博客&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;这里我会显示一张图片&lt;/p&gt;
&lt;img src=&quot;/201
      
    
    </summary>
    
    
  </entry>
  
</feed>
